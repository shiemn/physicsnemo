# SPDX-FileCopyrightText: Copyright (c) 2023 - 2024 NVIDIA CORPORATION & AFFILIATES.
# SPDX-FileCopyrightText: All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

hydra:
    job:
          chdir: false
          name: cordex_bench_regression
    run:
          dir: ./output/${hydra:job.name}
    searchpath:
          - pkg://conf/base # Do not modify

# Base parameters for dataset, model, training, and validation
defaults:

    - dataset: custom 
    # The dataset type for training.
    # Accepted values:
    #   `gefs_hrrr`: full GEFS-HRRR dataset for continental US.
    #   `hrrr_mini`: smaller HRRR dataset (continental US), for fast experiments.
    #   `cwb`: full CWB dataset for Taiwan.
    #   `custom`: user-defined dataset. Parameters need to be specified below.

    - model: regression
    # The model type.
    # Accepted values:
    #     `regression`: a regression UNet for deterministic predictions
    #     `lt_aware_ce_regression`: similar to `regression` but with lead time
    #       conditioning
    #     `diffusion`: a diffusion UNet for residual predictions
    #     `patched_diffusion`: a more memory-efficient diffusion model
    #     `lt_aware_patched_diffusion`: similar to `patched_diffusion` but
    #       with lead time conditioning

    - model_size: mini
    # The model size configuration.
    # Accepted values:
    #     `normal`: normal model size
    #     `mini`: smaller model size for fast experiments

    - training: ${model}
    # The base training parameters. Determined by the model type.


# Dataset parameters. Used for `custom` dataset type.
# Modify or add below parameters that should be passed as argument to the
# user-defined dataset class.
dataset:
    type: cordex_bench # datasets/benchmark_dataset.py::CordexBenchDataset
    data_path: /data/CordexBench/ALPS_domain
    domain: ALPS
    evaluation_type: PP
    gcm: CNRM-CM6-1
    task: pseudo-reality
    standardize: true
    stage: 'train'
    
    # CordexBench predictor variables - actual variables from the dataset
    input_variables: ["u_850", "u_700", "u_500", "v_850", "v_700", "v_500",
                      "q_850", "q_700", "q_500", "t_850", "t_700", "t_500",
                      "z_850", "z_700", "z_500"]
    output_variables: ['pr', 'tasmax']
    invariant_variables: ['Orog']

validation:
    stage: 'val'
    # CordexBench uses predefined train/val splits based on years
    # Train: 1961-1978, Val: 1979-1980
    # No need to specify years as they are handled internally

# Training parameters
training:
    hp:
        training_duration: 2000000
        total_batch_size: 32
        # Training duration based on the number of processed samples
    io:
        print_progress_freq: 10000
        checkpoint_dir: /checkpoints/cordex_bench_alps
        save_n_recent_checkpoints: 5

# Parameters for wandb logging
wandb:
    mode: online
    # Configure whether to use wandb: "offline", "online", "disabled"
    results_dir: "./wandb"
    # Directory to store wandb results
    watch_model: false
    # If true, wandb will track model parameters and gradients
